apply plugin: 'com.android.application'

// versionName  <major>.<minor>.<patch>
// major : 대규모 패치, 직접 count
// minor : 큰 작은 버그 수정사항, 직접 count
// patch : 별로 중요하지 않은 부분, 자동 count
//
// Gradle->herethere_android_Tasks->build->assembleRelease run하여 versionCode, patch 숫자를 올림  (ex. RELEASES-1.0.2-app-release-unsigned.apk )
// Build->Generate Signed Apk로 Google Play Store에 올릴 apk 생성  (ex. RELEASES-1.0.2-app-release.apk )
android {
    compileSdkVersion 27
    buildToolsVersion '27.0.2'

    //File 불러오기
    def versionPropsFile = file('version.properties')

    //File Read 여부 체크
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        //Release 할대만 VersionCode 및 patch 값을 Count up해 준다.
        def value = 0
        def runTasks = gradle.startParameter.taskNames
        if ('assembleRelease' in runTasks) {
            value = 1;
        }

        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value

        //Build 정보는 Debug, Release 상관없이 빌드하면 무조건 Count up
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()

        //update 된 설정값들을 다시 version.properties 파일에 쓰기
        versionProps.store(versionPropsFile.newWriter(), null)


        defaultConfig {
            applicationId "com.ridecrew.ridecrew"
            minSdkVersion 17
            targetSdkVersion 27
            versionCode versionNumber
            versionName "${versionMajor}.${versionMinor}.${versionPatch}"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                //apk 파일이 생성되는 folder 및 파일이름
                def fileNaming = "apk/RELEASES"
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    output.outputFileName = new File("app/",
                            "${fileNaming}-${versionMajor}.${versionMinor}.${versionPatch}-${outputFile.name}")
                }
            }
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://maven.google.com' }
}

dependencies {
    ext {
        support_library_version = '27.1.1'
        google_play_services_version = '11.8.0'
    }
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation "com.android.support:support-annotations:${support_library_version}"
    implementation "com.google.firebase:firebase-auth:${google_play_services_version}"
    implementation "com.google.android.gms:play-services-auth:${google_play_services_version}"
    implementation "com.google.firebase:firebase-core:${google_play_services_version}"
    implementation "com.android.support:appcompat-v7:${support_library_version}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation "com.android.support:support-v4:${support_library_version}"
    implementation "com.android.support:design:${support_library_version}"
    implementation "com.android.support:appcompat-v7:${support_library_version}"
    implementation "com.android.support:design:${support_library_version}"

    //v7 Preference 지원 라이브러리 (환경설정 라이브러리)
    implementation "com.android.support:preference-v7:${support_library_version}"
    implementation "com.android.support:cardview-v7:${support_library_version}"
    implementation "com.android.support:recyclerview-v7:${support_library_version}"

    // rest api
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.prolificinteractive:material-calendarview:1.4.3'

    //PullToRefreshView
    implementation 'com.yalantis:phoenix:1.2.3'

    //VerticalFastScroller
    implementation 'xyz.danoz:recyclerviewfastscroller:0.1.3'

    //circularImageView
    implementation 'com.mikhaellopez:circularimageview:3.0.2'

    //image
    implementation 'com.github.bumptech.glide:glide:4.2.0'

    //aws
    implementation 'com.amazonaws:aws-android-sdk-core:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-s3:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-ddb:2.2.+'

    //float Action Button
    implementation 'com.github.clans:fab:1.6.2'

    //facebook
    implementation 'com.facebook.android:facebook-login:[4,5)'

    //hdodenhof.circleimageview
    implementation 'de.hdodenhof:circleimageview:1.2.1'
    implementation 'org.jsoup:jsoup:1.10.2'

    // rxjava, jxandroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.14'
}

apply plugin: 'com.google.gms.google-services'